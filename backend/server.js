// backend/server.js

// 1. ImportaÃ§Ã£o dos MÃ³dulos
import express from 'express';      // Framework para criar o servidor
import dotenv from 'dotenv';        // Para gerenciar variÃ¡veis de ambiente (do arquivo .env)
import cors from 'cors';            // Para permitir requisiÃ§Ãµes de outros "endereÃ§os" (frontend)
import connectDB from './config/db.js'; // Nossa funÃ§Ã£o de conexÃ£o com o MongoDB
import productRoutes from './routes/productRoutes.js'; // Nosso arquivo de rotas para produtos

// 2. ConfiguraÃ§Ã£o Inicial
dotenv.config(); // Carrega as variÃ¡veis do arquivo .env para process.env
connectDB();     // Executa a funÃ§Ã£o para conectar ao banco de dados

const app = express(); // Inicializa o aplicativo Express

// 3. Middlewares (FunÃ§Ãµes de Suporte)
// Middleware para habilitar o CORS, resolvendo o erro de acesso
app.use(cors());

// Middleware para permitir que o servidor aceite e entenda dados em formato JSON no corpo das requisiÃ§Ãµes
app.use(express.json());

// 4. DefiniÃ§Ã£o das Rotas
// Rota de teste para verificar se a API estÃ¡ no ar
app.get('/', (req, res) => {
  res.send('API do Mercado Online estÃ¡ funcionando!');
});

// "Monta" as rotas de produtos. Qualquer requisiÃ§Ã£o que comece com /api/products
// serÃ¡ gerenciada pelo nosso arquivo productRoutes.js
app.use('/api/products', productRoutes);

// 5. InicializaÃ§Ã£o do Servidor
const PORT = process.env.PORT || 5000; // Usa a porta definida no .env ou a porta 5000 como padrÃ£o

app.listen(PORT, () => {
  console.log(`ðŸš€ Servidor backend rodando na porta ${PORT}`);
});